#include <vector>
using namespace std;

class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        // Create an adjacency list for the graph
        vector<vector<int>> adj(numCourses);
        for (auto& p : prerequisites) {
            adj[p[1]].push_back(p[0]);
        }

        // Vector to track the state of each node:
        // 0 = unvisited, 1 = visiting, 2 = visited
        vector<int> visited(numCourses, 0);

        // DFS function to detect cycles
        function<bool(int)> dfs = [&](int node) {
            if (visited[node] == 1) return true;  // Cycle detected
            if (visited[node] == 2) return false; // Node already processed
            
            // Mark the node as visiting
            visited[node] = 1;

            // Recursively visit all neighbors
            for (int neighbor : adj[node]) {
                if (dfs(neighbor)) return true;
            }

            // Mark the node as visited
            visited[node] = 2;
            return false;
        };

        // Check for cycles in each component of the graph
        for (int i = 0; i < numCourses; ++i) {
            if (dfs(i)) return false;  // Cycle found, cannot finish courses
        }
        
        return true;  // No cycle found, can finish courses
    }
};
