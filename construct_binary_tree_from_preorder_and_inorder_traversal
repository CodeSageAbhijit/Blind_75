class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helper(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
    }

    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int preStart, int preEnd, int inStart, int inEnd) {
        // Base case: If there are no elements to construct the tree
        if (preStart > preEnd || inStart > inEnd) {
            return nullptr;
        }
        
        // The first element in preorder is the root.
        TreeNode* root = new TreeNode(preorder[preStart]);

        // Find the root's index in the inorder array
        int mid = inStart;
        while (inorder[mid] != preorder[preStart]) {
            mid++;
        }

        // Number of elements in the left subtree
        int leftTreeSize = mid - inStart;

        // Recursively build the left and right subtrees
        root->left = helper(preorder, inorder, preStart + 1, preStart + leftTreeSize, inStart, mid - 1);
        root->right = helper(preorder, inorder, preStart + leftTreeSize + 1, preEnd, mid + 1, inEnd);

        return root;
    }
};
