#include <iostream>
#include <vector>
#include <queue>
#include <set>

class Solution {
public:
    void bfs(int r, int c, vector<vector<char>>& grid, set<pair<int, int>>& visited) {
        queue<pair<int, int>> q;
        visited.insert({r, c});
        q.push({r, c});

        vector<vector<int>> directions = {
            {1, 0},
            {-1, 0},
            {0, 1},
            {0, -1}
        };

        while (!q.empty()) {
            auto [row, col] = q.front();  // Use structured binding for clarity
            q.pop();

            for (const auto& vec : directions) {
                int newRow = row + vec[0];
                int newCol = col + vec[1];

                if (newRow >= 0 && newRow < grid.size() &&
                    newCol >= 0 && newCol < grid[0].size() &&
                    grid[newRow][newCol] == '1' && 
                    visited.find({newRow, newCol}) == visited.end()) {

                    q.push({newRow, newCol});
                    visited.insert({newRow, newCol});
                }
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()) return 0;
        int rows = grid.size();
        int cols = grid[0].size();
        set<pair<int, int>> visited;
        int islands = 0;

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (grid[i][j] == '1' && visited.find({i, j}) == visited.end()) {
                    bfs(i, j, grid, visited);
                    islands++;
                }
            }
        }
        return islands;
    }
};
