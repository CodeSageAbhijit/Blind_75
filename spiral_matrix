class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int rowBegin = 0;
        int rowEnd = matrix.size() - 1; // 3
        int colBegin = 0;
        int colEnd = matrix[0].size() - 1; // 4
        vector<int> result;

        while((rowBegin <= rowEnd) and (colBegin <= colEnd)){

            for(int i=colBegin;i<=colEnd;i++){
                result.push_back(matrix[rowBegin][i]);
            }
            rowBegin++;

            for(int i=rowBegin;i<=rowEnd;i++){
                result.push_back(matrix[i][colEnd]);
            }
            colEnd--;
            // to handle the edge cases where only one column and row is left to prevent going out of bounds
            if (rowBegin <= rowEnd){  
                for(int i=colEnd;i>=colBegin;i--){
                    result.push_back(matrix[rowEnd][i]);
                }
                rowEnd--;
            }
            
            if (colBegin <= colEnd){
                for(int i=rowEnd;i>=rowBegin;i--){
                    result.push_back(matrix[i][colBegin]);
                }
                colBegin++;
            }
            
        }
        return result;
    }
};
