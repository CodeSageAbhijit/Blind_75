class TrieNode{
public:
        unordered_map<char, shared_ptr<TrieNode>> children;

        bool isEndOfWord;
        // Constructor to initialize a TrieNode
        TrieNode() : isEndOfWord(false) {}
        
    };


class Trie {
    private:
    // Root node of the Trie
    std::shared_ptr<TrieNode> root;
public:
    Trie() {
        root = std::make_shared<TrieNode>();
    }
    
    void insert(string word) {
        std::shared_ptr<TrieNode> node = root;
        for (char ch : word) {
            if (node->children.find(ch) == node->children.end()) {
                node->children[ch] = std::make_shared<TrieNode>();
            }
            node = node->children[ch];
        }
        node->isEndOfWord = true; // Mark the end of the word
    }
    
    bool search(string word) {
         std::shared_ptr<TrieNode> node = root;
        for (char ch : word) {
            if (node->children.find(ch) == node->children.end()) {
                return false;
            }
            node = node->children[ch];
        }
        return node->isEndOfWord;
    }
    
    bool startsWith(string prefix) {
        std::shared_ptr<TrieNode> node = root;
        for (char ch : prefix) {
            if (node->children.find(ch) == node->children.end()) {
                return false;
            }
            node = node->children[ch];
        }
        return true;
    }
    
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
