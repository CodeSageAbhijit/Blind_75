/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* clone_util(Node* node, unordered_map<Node*,Node*>& map){
        Node *new_node = new Node(node->val);
        map[node] = new_node;
        for(auto neighbor : node->neighbors){
            if(map.find(neighbor) == map.end()){
                new_node->neighbors.push_back(clone_util(neighbor,map));
            }
            else{
                new_node->neighbors.push_back(map[neighbor]);
            }
        }
        return new_node;
    }
    Node* cloneGraph(Node* node) {
        if (node == nullptr) {
            return nullptr;  // Return nullptr if the input node is null
        }
        unordered_map<Node*,Node*> map;
        return clone_util(node, map);
    }
};

// clone_util Function:

// This function is the core of the cloning process. It takes two arguments: the current node to clone and a map to keep track of cloned nodes.
// If a node has already been cloned (i.e., it exists in the map), the function returns the cloned node from the map.
// If the node hasn't been cloned, it creates a new node, clones its neighbors recursively, and then returns the new node.

// The list [[2,4],[1,3],[2,4],[1,3]] represents the adjacency list of an undirected graph. Each sublist corresponds to a node, and the elements within each sublist represent the nodes to which it is directly connected (its neighbors).

// Breakdown of the Adjacency List:
// Node 1: The first sublist [2,4] means that node 1 is connected to nodes 2 and 4.
// Node 2: The second sublist [1,3] means that node 2 is connected to nodes 1 and 3.
// Node 3: The third sublist [2,4] means that node 3 is connected to nodes 2 and 4.
// Node 4: The fourth sublist [1,3] means that node 4 is connected to nodes 1 and 3.
