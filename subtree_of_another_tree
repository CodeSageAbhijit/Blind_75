/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* node, string& serial) {
        if (!node) {
            serial += "N,";
            return;
        }
        serial += to_string(node->val) + ",";
        dfs(node->left, serial);
        dfs(node->right, serial);
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if (!subRoot) return true;  // An empty tree is always a subtree
        if (!root) return false;     // If root is empty but subRoot isn't, return false
        string serial1;
        string serial2;
        dfs(root, serial1);
        dfs(subRoot, serial2);
        serial1.pop_back();
        serial2.pop_back();

        // cout << serial1<< endl << serial2 << endl;
        int index = serial1.find(serial2);
        if (index != string::npos) {
            // Check boundaries to ensure it's a proper subtree match
            if ((index > 0 && serial1[index - 1] != ',') || 
                (index + serial2.length() < serial1.size() && serial1[index + serial2.length()] != ','))         {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }
};
